# server port
server.port=8082

#Spring Security Username and password
#spring.security.user.name=user
#spring.security.user.password=password
#spring.security.user.roles=ADMIN

# Allow circular references
spring.main.allow-circular-references=true
#Jwt Secret Key
jwt.secret=5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437

# Set maximum file size to 5MB
spring.servlet.multipart.max-file-size=5MB

# H2 Database
# DataSource settings: set here your own configurations for the database connection
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=vrpi
spring.datasource.password=vrpi
spring.datasource.driver-class-name=org.h2.Driver

# Hibernate settings
# Let Hibernate update/create your tables automatically
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect


spring.application.name=usermodule
#
#spring.datasource.url=jdbc:postgresql://localhost:5432/usermodule
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.username=postgres
#spring.datasource.password=admin

#logging in console level
#logging.level.root=debug
#logging.level.org.springframework.web=debug
#logging.level.org.hibernate=debug

# JPA
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

# smtp
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=amanrashm@gmail.com
spring.mail.password=cchgrrsdnchmraxc
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# CORS
cors.allowedOrigins=*
#cors.allowedMethods=GET, POST, PUT, DELETE, OPTIONS
#cors.allowedHeaders=Authorization, Content-Type
#cors.exposedHeaders=Authorization, Content-Type
#cors.maxAge=3600

#File Upload
#file.upload-dir=uploads

## 3. Run the application
#- Clone the repository to your local machine.
#- Open the project in your favorite IDE.
#- Run the application by executing the `main` method in the `com.aman.app.Application` class.
#- The application will start on port `8080`.
#- Open the Swagger UI by entering the following URL in your browser: `http://localhost:8080/swagger-ui.html`
#- You can also access the H2 Database Console by entering the following URL in your browser: `http://localhost:8080/h2-console`
#- Enter the following JDBC URL in the H2 Database Console: `jdbc:h2:mem:testdb`
#- Click on the `Connect` button to access the database.

## 4. Test the application
#- Open the Swagger UI by entering the following URL in your browser: `http://localhost:8080/swagger-ui.html`
#- You can test the application by clicking on the `Try it out` button and then clicking on the `Execute` button.
#- You can also test the application using Postman or any other REST client.
#- You can access the H2 Database Console by entering the following URL in your browser: `http://localhost:8080/h2-console`
#- Enter the following JDBC URL in the H2 Database Console: `jdbc:h2:mem:testdb`

eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
